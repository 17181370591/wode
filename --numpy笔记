基础：
In [6]: names=['bob','u','bob','BoB']
In [7]: n=np.array(names)
In [9]: n=='bob'
Out[9]: array([ True, False,  True, False], dtype=bool)
In [10]: data=np.random.randn(4,2)
Out[12]:
array([[-1.54613823,  0.5331418 ],
       [-1.67536127, -0.23720734],
       [ 0.20009908, -0.89256508],
       [-1.34250007,  0.05955127]])
In [13】: z=n=='bob'
In [14]: z
Out[14]: array([ True, False,  True, False], dtype=bool)
In [15]: data[z]
Out[15]:
array([[-1.54613823,  0.5331418 ],
       [ 0.20009908, -0.89256508]])
In [27]: data[n!='bob']
Out[27]:
array([[-1.67536127, -0.23720734],
       [-1.34250007,  0.05955127]])
In [28]: data[[n!='bob',0]]
Out[28]: array([-1.67536127, -1.34250007])
In [29]: data[[n!='bob',0]].shape
Out[29]: (2,)
>>> a=np.arange(32).reshape(8,4)
>>> a
array([[ 0,  1,  2,  3],
       [ 4,  5,  6,  7],
       [ 8,  9, 10, 11],
       [12, 13, 14, 15],
       [16, 17, 18, 19],
       [20, 21, 22, 23],
       [24, 25, 26, 27],
       [28, 29, 30, 31]])
>>> a[[3,2]][:,[0,3,2,1]]
array([[12, 15, 14, 13],
       [ 8, 11, 10,  9]])
>>> a[[0,1,2,3],[0,1,2,3]]
array([ 0,  5, 10, 15])
>>> bb
array([[[ 0,  1,  2,  3],
        [ 4,  5,  6,  7]],
       [[ 8,  9, 10, 11],
        [12, 13, 14, 15]]])
>>> bb.T				#2*2*4变成4*2*2，相当于transpose（2,1,0）。bb[a,b,c]转到bb.T[c,b,a]
array([[[ 0,  8],
        [ 4, 12]],
       [[ 1,  9],
        [ 5, 13]],
       [[ 2, 10],
        [ 6, 14]],
       [[ 3, 11],
        [ 7, 15]]])
>>> b
    0   1   2   3
0   0   1   2   3
1   4   5   6   7
2   8   9  10  11
3  12  13  14  15
4  16  17  18  19
5  20  21  22  23
6  24  25  26  27
7  28  29  30  31
>>> b.div(other=b.sum(1),axis=0)
          0         1         2         3
0  0.000000  0.166667  0.333333  0.500000
1  0.181818  0.227273  0.272727  0.318182
2  0.210526  0.236842  0.263158  0.289474
3  0.222222  0.240741  0.259259  0.277778
4  0.228571  0.242857  0.257143  0.271429
5  0.232558  0.244186  0.255814  0.267442
6  0.235294  0.245098  0.254902  0.264706
7  0.237288  0.245763  0.254237  0.262712
>>> a=np.random.randn(5,3)
>>> a
array([[-0.64088972, -0.82238882, -1.56811481],
       [-1.39994523, -0.4600038 ,  0.17497844],
       [-0.22802461,  0.37191387,  1.48373375],
       [ 1.42771363, -3.23765867, -0.54546454],
       [ 2.58609684, -0.25297288, -0.69122044]])
>>> np.where(a>=0,a,-a)
array([[ 0.64088972,  0.82238882,  1.56811481],
       [ 1.39994523,  0.4600038 ,  0.17497844],
       [ 0.22802461,  0.37191387,  1.48373375],
       [ 1.42771363,  3.23765867,  0.54546454],
       [ 2.58609684,  0.25297288,  0.69122044]])
>>> b=np.arange(-10,10,1)
>>> np.where(b>=0,np.where(b%2==0,b*2,b),np.where(b%2==0,b,b*2))
array([-10, -18,  -8, -14,  -6, -10,  -4,  -6,  -2,  -2,   0,   1,   4,
         3,   8,   5,  12,   7,  16,   9])
>>> a=np.arange(9).reshape(3,3)
>>> a
array([[0, 1, 2],
       [3, 4, 5],
       [6, 7, 8]])
>>> a.cumprod()
array([0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=int32)
>>> a.cumprod(0)
array([[ 0,  1,  2],
       [ 0,  4, 10],
       [ 0, 28, 80]], dtype=int32)
>>> a.cumprod(1)
array([[  0,   0,   0],
       [  3,  12,  60],
       [  6,  42, 336]], dtype=int32)
>>> a.cumsum(0)						#叠加
array([[ 0,  1,  2],
       [ 3,  5,  7],
       [ 9, 12, 15]], dtype=int32)
>>> a
array([[8, 1, 2],
       [3, 8, 5],
       [6, 7, 8]])
       
#argmax求最大值的索引
>>> a.argmax()
0
>>> a.argmax(0)
array([0, 1, 2], dtype=int64)
>>> a.argmax(1)
array([0, 1, 2], dtype=int64)
>>> a[0][1]=9
>>> a
array([[8, 9, 2],
       [3, 8, 5],
       [6, 7, 8]])
>>> a.argmax()
1
>>> a.argmax(0)
array([0, 0, 2], dtype=int64)
>>> a.argmax(1)
array([1, 1, 2], dtype=int64)
=================================================
一维运算：
unique：返回唯一值并排序。相当于sorted(set(a))
>>> a=[1,3,5,7,9]
>>> b=[7,4,3,6,5]
>>> np.intersect1d(a,b)			#交集并排序
array([3, 5, 7])
>>> np.union1d(a,b)			#并集并排序
array([1, 3, 4, 5, 6, 7, 9])				
>>> np.in1d(a,b)				#a中有哪些元素在b里
array([False,  True,  True,  True, False], dtype=bool)
>>> np.isin(a,b)
array([False,  True,  True,  True, False], dtype=bool)
>>> np.setdiff1d(a,b)			#在a不在b
array([1, 9])
>>> np.setxor1d(a,b)			#不同时在a，b，即存在于一个集合但不存在于两个集合
array([1, 4, 6, 9])
==================================================================

========================================================================================================
import numpy as np
np1=np.random.randint(1,5,(4,3,2))   #随机整数按shape生成矩阵
>>>np1=array([[[3, 4],
        [4, 1],
        [3, 1]],

       [[2, 1],
        [4, 4],
        [4, 2]],

       [[1, 1],
        [4, 3],
        [4, 4]],

       [[4, 4],
        [2, 1],
        [1, 1]]])
np1.shape=(4,3,2） 				#shape
>>> np1.reshape(2,12) 					#reshape
array([[3, 4, 4, 1, 3, 1, 2, 1, 4, 4, 4, 2],
       [1, 1, 4, 3, 4, 4, 4, 4, 2, 1, 1, 1]])
>>> a[a>3]=0
>>> a
array([[2, 0, 1, 1, 0, 3, 0, 1, 3, 1, 1, 0],
       [0, 3, 3, 0, 1, 2, 1, 1, 1, 1, 2, 0]])
a=np.zeros((2,2))					#0矩阵
b=np.ones((2,2))					#1矩阵
>>> np.vstack((a,b))				#纵向合并
array([[ 0.,  0.],
       [ 0.,  0.],
       [ 1.,  1.],
       [ 1.,  1.]])
>>> np.hstack((a,b))				#横向合并
array([[ 0.,  0.,  1.,  1.],
       [ 0.,  0.,  1.,  1.]])
>>> a.astype(str)					#该数据类型成str
array([['0.0', '0.0'],
       ['0.0', '0.0']],
      dtype='<U32')
axis参数：axis表示维度，计算后该维度消失
>>> h=np.random.normal(1.5,1.9,5000)				#生成随机小数矩阵
>>> h
array([ 1.69432671,  4.08271529,  1.12701659, ...,  1.17263746,
        0.87362005, -0.54036496])
>>> np.random.rand(40)*10							#随机数。randn是正态分布，可以用matplotlib.pyplot.hist检验
array([ 8.15974414,  1.23722612,  5.34915939,  0.2829941 ,  2.14144842,
        2.19469857,  7.52827602,  6.79207408,  0.35171309,  3.58022468,
        7.67679206,  5.91643561,  6.56187231,  7.46714043,  7.98035664,
        2.77584506,  5.07965659,  0.77325523,  4.1416402 ,  4.83622342,
        4.66454725,  8.54157555,  2.7357985 ,  1.4609727 ,  2.23396831,
        4.9880839 ,  6.38424338,  3.42729859,  3.9119252 ,  2.68425486,
        7.24446718,  8.29946417,  2.47116765,  6.24729974,  2.48306343,
        9.70848223,  4.92082961,  2.87872096,  9.17106253,  0.86844288])
>>> s=np.column_stack((h,w))				#拼接
>>> s
array([[   1.69432671,  215.76844355],
       [   4.08271529,  137.21899073],
       [   1.12701659,   16.91383842],
       ..., 
       [   1.17263746,   98.41295838],
       [   0.87362005,    6.84965961],
       [  -0.54036496,   89.35056076]])
===================================================================
np.random.randint(6,10,size=10)				#生成随机数组
==========================================
-1是模糊控制的意思 比如人reshape（-1,2）固定2列 多少行不知道

==========================================

a=np.random.choice(5,3,p=[0,0,0,0,1])
#5表示数据元的int或者array，3表示长度，p表示第一个参数的所有值的概率（和必须=1）

a1 = np.arange(9)
a2=a1.reshape((3, 3))
a1=np.random.permutation(a1).reshape((3,3))
a2=np.random.permutation(a2)
#随机打乱，类似shuffle

print(a)
print(a1)
print(a2)
#=>           [4 4 4]
#=>    [[0 5 3]
       [2 7 1]
       [8 6 4]]
#=>           [[6 7 8]
              [0 1 2]
              [3 4 5]]
