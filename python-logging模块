将日志输出到控制台 
 
 # coding=utf-8 
__author__ = 'liu.chunming' 
import logging 
   
logging.basicConfig(level=logging.WARNING, 
                    format='%(asctime)s - %(filename)s[line:%(lineno)d] - %(levelname)s: %(message)s') 
# use logging 
logging.info('this is a loggging info message') 
logging.debug('this is a loggging debug message') 
logging.warning('this is loggging a warning message') 
logging.error('this is an loggging error message') 
logging.critical('this is a loggging critical message') 

===================================================================================

logging.basicConfig([**kwargs]):

为日志模块配置基本信息。kwargs 支持如下几个关键字参数：
filename ：日志文件的保存路径。如果配置了些参数，将自动创建一个FileHandler作为Handler；
filemode ：日志文件的打开模式。 默认值为'a'，表示日志消息以追加的形式添加到日志文件中。如果设为'w', 
那么每次程序启动的时候都会创建一个新的日志文件；
format ：设置日志输出格式；
datefmt ：定义日期格式；
level ：设置日志的级别.对低于该级别的日志消息将被忽略；
stream ：设置特定的流用于初始化StreamHandler；

演示如下：

import logging
import os
FILE=os.getcwd()

logging.basicConfig(level=logging.DEBUG,
                    format='%(asctime)s:%(filename)s[line:%(lineno)d] %(levelname)s %(message)s',
                    datefmt='%a, %d %b %Y %H:%M:%S',
                    filename = os.path.join(FILE,'log.txt'),
                    filemode='w')
logging.info('msg')
logging.debug('msg2')

===================================================================================

logging.getLogger([name])

创建Logger对象。日志记录的工作主要由Logger对象来完成。在调用getLogger时要提供Logger的名称
（注：多次使用相同名称 来调用getLogger，返回的是同一个对象的引用。），Logger实例之间有层次关系，这些关系通过Logger名称来体现，如：

p = logging.getLogger("root")
c1 = logging.getLogger("root.c1")
c2 = logging.getLogger("root.c2")

例子中，p是父logger, c1,c2分别是p的子logger。c1, c2将继承p的设置。如果省略了name参数, getLogger将返回日志对象层次关系中的根Logger。

import logging
'''命名'''
log2=logging.getLogger('BeginMan')  #生成一个日志对象
print (log2.name,log2)  #<logging.Logger object at 0x00000000026D1710>

'''无名'''
log3 = logging.getLogger()
print (log3.name,log3)  #<logging.RootLogger object at 0x0000000002721630> 如果没有指定name，则返回RootLogger

'''最好的方式'''
log = logging.getLogger(__name__)#__name__ is the module’s name in the Python package namespace.
print (log.name,log)   #<logging.Logger object at 0x0000000001CD5518>  Logger对象
print (__name__)  #__main__

===================================================================================

 import logging

  logger = logging.getLogger(__name__)
  logger.setLevel(level = logging.INFO)
  
   #设置logging信息的格式
  fmt='%(levelname)s>>>%(asctime)s|||%(message)s'
  formatter = logging.Formatter(fmt)

   #创建一个FileHandler，并对输出消息的格式进行设置，将其添加到logger，然后将日志写入到指定的文件中
  handler = logging.FileHandler("log.txt")
  #handler.setLevel(logging.INFO)
  handler.setFormatter(formatter)

   #logger中添加StreamHandler，可以将日志输出到屏幕上
  console = logging.StreamHandler()
  #console.setLevel(logging.INFO)

   #添加到logger
  logger.addHandler(handler)
  logger.addHandler(console)

  logger.info("Start print log")
  logger.debug("Do something")
  logger.warning("Something maybe fail.")
  try:
      open("sklearn.txt","rb")
  except (SystemExit,KeyboardInterrupt):
      raise
  except Exception:
      logger.error("Faild to open sklearn.txt from logger.error",exc_info = True)
      #也可以使用logger.exception(msg,_args)，它等价于logger.error(msg,exc_info = True,_args)
  logger.info("Finish")

===================================================================================

  #fmt的内容：
%(levelno)s：打印日志级别的数值
%(levelname)s：打印日志级别的名称
%(pathname)s：打印当前执行程序的路径，其实就是sys.argv[0]
%(filename)s：打印当前执行程序名
%(funcName)s：打印日志的当前函数
%(lineno)d：打印日志的当前行号
%(asctime)s：打印日志的时间
%(thread)d：打印线程ID
%(threadName)s：打印线程名称
%(process)d：打印进程ID
%(message)s：打印日志信息

  #各种handler，console打印使用StreamHandler，保存日志到文件使用FileHandler
StreamHandler：logging.StreamHandler；日志输出到流，可以是sys.stderr，sys.stdout或者文件
FileHandler：logging.FileHandler；日志输出到文件
BaseRotatingHandler：logging.handlers.BaseRotatingHandler；基本的日志回滚方式
RotatingHandler：logging.handlers.RotatingHandler；日志回滚方式，支持日志文件最大数量和日志文件回滚
TimeRotatingHandler：logging.handlers.TimeRotatingHandler；日志回滚方式，在一定时间区域内回滚日志文件
SocketHandler：logging.handlers.SocketHandler；远程输出日志到TCP/IP sockets
DatagramHandler：logging.handlers.DatagramHandler；远程输出日志到UDP sockets
SMTPHandler：logging.handlers.SMTPHandler；远程输出日志到邮件地址
SysLogHandler：logging.handlers.SysLogHandler；日志输出到syslog
NTEventLogHandler：logging.handlers.NTEventLogHandler；远程输出日志到Windows NT/2000/XP的事件日志
MemoryHandler：logging.handlers.MemoryHandler；日志输出到内存中的指定buffer
HTTPHandler：logging.handlers.HTTPHandler；通过"GET"或者"POST"远程输出到HTTP服务器

 #消息等级：
FATAL：致命错误
CRITICAL：特别糟糕的事情，如内存耗尽、磁盘空间为空，一般很少使用
ERROR：发生错误时，如IO操作失败或者连接问题
WARNING：发生很重要的事件，但是并不是错误时，如用户登录密码错误
INFO：处理请求或者状态变化等日常事务
DEBUG：调试过程中使用DEBUG等级，如算法中每个循环的中间状态

===================================================================================

<h3>多模块使用logging</h3>
主模块mainModule.py

import logging
import  subModule
logger = logging.getLogger("mainModule")
logger.setLevel(level = logging.INFO)
handler = logging.FileHandler("log.txt")
handler.setLevel(logging.INFO)
formatter = logging.Formatter('%(name)s - %(levelname)s - %(message)s')
handler.setFormatter(formatter)

console = logging.StreamHandler()
 #这里设置了debug也没用
console.setLevel(logging.DEBUG)
console.setFormatter(formatter)

logger.addHandler(handler)
logger.addHandler(console)

logger.info("creating an instance of subModule.subModuleClass")
a = subModule.SubModuleClass()
logger.info("calling subModule.subModuleClass.doSomething")
a.doSomething()
logger.info("done with  subModule.subModuleClass.doSomething")
logger.info("calling subModule.some_function")
subModule.som_function()
logger.info("done with subModule.some_function")

子模块subModule.py

import logging

module_logger = logging.getLogger("mainModule.sub")
class SubModuleClass(object):
    def __init__(self):
        self.logger = logging.getLogger("mainModule.sub.module")
        self.logger.info("creating an instance in SubModuleClass")
    def doSomething(self):
        self.logger.info("do something in SubModule")
        a = []
        a.append(1)
        self.logger.debug("list a = " + str(a))
        self.logger.info("finish something in SubModuleClass")

def som_function():
    module_logger.info("call function some_function")

===================================================================================

多模块使用logging另一个例子

a.py-------------
import logging,b

l=logging.getLogger('huaq')
fmt='%(name)s>>>%(levelname)s:%(message)s'
fmt=logging.Formatter(fmt)
l.setLevel(logging.INFO)


p=logging.FileHandler('log.txt')
p.setFormatter(fmt)

s=logging.StreamHandler()
s.setFormatter(fmt)

l.addHandler(p)
l.addHandler(s)

q=b.Q()
q.dos(4)
b.f(b.l1)
c=logging.getLogger('huaq.q3')
b.f(c)

b.py-------------
import logging

l1=logging.getLogger('huaq.q1')

class Q(object):
    def __init__(self):
        self.l2=logging.getLogger('huaq.q2')
        self.l2.info('i am huaq2!2!')
    def dos(self,m):
        for i in range(m):
            self.l2.info(i**2)

def f(l):
    l.info('fuck u{}'.format(l))

===================================================================================

